package net.bouzuya.nekurabe.data.migration

import android.database.Cursor
import androidx.sqlite.db.SupportSQLiteDatabase
import net.bouzuya.nekurabe.data.OffsetDateTimeConverter
import org.junit.Assert
import org.threeten.bp.OffsetDateTime


fun testItemsTable(database: SupportSQLiteDatabase) {
    val name = "name1"
    val createdAt = OffsetDateTime.now()
    val updatedAt = createdAt.plusMinutes(5)

    database.execSQL(
        "INSERT INTO items(name, created_at, updated_at) VALUES(?, ?, ?)",
        arrayOf(
            name,
            OffsetDateTimeConverter().toLong(createdAt),
            OffsetDateTimeConverter().toLong(updatedAt)
        )
    )

    val autoGeneratedId = 1L
    val cursor = database.query(
        "SELECT id, name, created_at, updated_at FROM items WHERE id = ?",
        arrayOf(autoGeneratedId)
    )
    cursor.moveToNext()
    Assert.assertEquals(autoGeneratedId, cursor.getLong(0)) // id
    Assert.assertEquals(name, cursor.getString(1)) // name
    Assert.assertEquals(createdAt, cursor.getOffsetDateTime(2)) // created_at
    Assert.assertEquals(updatedAt, cursor.getOffsetDateTime(3)) // updated_at
}

fun testStoresTable(database: SupportSQLiteDatabase) {
    val name = "name1"
    val createdAt = OffsetDateTime.now()
    val updatedAt = createdAt.plusMinutes(5)

    database.execSQL(
        "INSERT INTO stores(name, created_at, updated_at) VALUES(?, ?, ?)",
        arrayOf(
            name,
            OffsetDateTimeConverter().toLong(createdAt),
            OffsetDateTimeConverter().toLong(updatedAt)
        )
    )

    val autoGeneratedId = 1L
    val cursor = database.query(
        "SELECT id, name, created_at, updated_at FROM stores WHERE id = ?",
        arrayOf(autoGeneratedId)
    )
    cursor.moveToNext()
    Assert.assertEquals(autoGeneratedId, cursor.getLong(0)) // id
    Assert.assertEquals(name, cursor.getString(1)) // name
    Assert.assertEquals(createdAt, cursor.getOffsetDateTime(2)) // created_at
    Assert.assertEquals(updatedAt, cursor.getOffsetDateTime(3)) // updated_at
}

// assert stores.length > 0
// assert items.length > 0
fun testPricesTable(database: SupportSQLiteDatabase) {
    val itemId = ({
        val cursor = database.query(
            "SELECT id FROM items ORDER BY id ASC"
        )
        cursor.moveToNext()
        cursor.getLong(0) // id
    })()
    val storeId = ({
        val cursor = database.query(
            "SELECT id FROM stores ORDER BY id ASC"
        )
        cursor.moveToNext()
        cursor.getLong(0) // id
    })()
    val price = 1000
    val amount = 100
    val createdAt = OffsetDateTime.now()
    val updatedAt = createdAt.plusMinutes(5)

    database.execSQL(
        "INSERT INTO prices(itemId, storeId, price, amount, created_at, updated_at) VALUES(?, ?, ?, ?, ?, ?)",
        arrayOf(
            itemId,
            storeId,
            price,
            amount,
            OffsetDateTimeConverter().toLong(createdAt),
            OffsetDateTimeConverter().toLong(updatedAt)
        )
    )

    val autoGeneratedId = 1L
    val cursor = database.query(
        "SELECT id, itemId, storeId, price, amount, created_at, updated_at FROM prices WHERE id = ?",
        arrayOf(autoGeneratedId)
    )
    cursor.moveToNext()
    Assert.assertEquals(autoGeneratedId, cursor.getLong(0)) // id
    Assert.assertEquals(itemId, cursor.getLong(1)) // itemId
    Assert.assertEquals(storeId, cursor.getLong(2)) // storeId
    Assert.assertEquals(price, cursor.getInt(3)) // price
    Assert.assertEquals(amount, cursor.getInt(4)) // amount
    Assert.assertEquals(createdAt, cursor.getOffsetDateTime(5)) // created_at
    Assert.assertEquals(updatedAt, cursor.getOffsetDateTime(6)) // updated_at
}

fun Cursor.getOffsetDateTime(columnIndex: Int): OffsetDateTime =
    OffsetDateTimeConverter().fromLong(getLong(columnIndex))
